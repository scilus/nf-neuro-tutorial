nextflow_process {

    name "Test Process SEGMENTATION_FSRECONALL"
    script "../main.nf"
    process "SEGMENTATION_FSRECONALL"

    tag "modules"
    tag "modules_nfcore"
    tag "segmentation"
    tag "segmentation/fsreconall"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "freesurfer.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("segmentation - fsreconall") {

        when {
            config "./nextflow_debug.config"

            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/anat_image.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.recon_all_out_folder.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }

    }


    test("segmentation - fsreconall - nolicense") {

        when {
            // Not in mode debug + no license = should fail.
            config "./nextflow.config"

            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/anat_image.nii.gz"),
                        []
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert ! process.success }
            )
        }

    }

    test("segmentation - fsreconall - stub-run") {
        options "-stub-run"
        when {
            config "./nextflow_debug.config"

            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/anat_image.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }

    }

}
